// to compile in terminal:
//                          make build
//                          ./tri
//                          echo $?
.global main
.extern intSqrt //DO NOT REMOVE


.align 4
.section .data 
// your data here
sideA: .word 9 // side A of the right angle = 0. integer value
sideB: .word 25  // side B of the right angle = 0. integer value
sum: .word 0    // accumulate sum
hyp: .word 0    // hyp = sqrt(a^2+b^2)


.align 4
.section .rodata // your read only data here
numPattern: .asciz "%d"
prompt: .asciz "\n\n\nThis program finds the hypontenuse of a right angle.\n"
promptA: .asciz "Enter side A as an integer: "
promptB: .asciz "Enter side B as an integer: "
outputA: .asciz "Side A: %d\n"
outputB: .asciz "Side B: %d\n"
outputSum: .asciz "Sum: %d\n"
outputHyp: .asciz "Hypotenuse: %d\n"

.text
main:
    push {lr}            // push link register r14 to top of stack
	
	// this is dummy code to show you how to use the intSqrt function
	// you can erase this and put your code here
	//mov r0, #4
    //bl intSqrt                 // Call a square root routine

    @ Ask for sideA input 
    ldr r0, =prompt     // load welcome message in r0
    bl printf           // print string in r0
    ldr r0, =promptA    // load this string in r0
    bl printf           // print string in r0

    @ get int sideA
    @ ldr r0, =numPattern // tells program a number is coming
    @ ldr r1, =sideA      // load r1 with sideA
    @ bl scanf            // saves input as sideA in r1

 
    @ output sideA
    ldr r0, =outputA    // load this string in r0
    ldr r1, =sideA      // load r1 with sideA address
    ldr r1, [r1]        // get value stored in the address thats load in r1
    bl printf          // print value of sideA



    @ Ask for sideB input 
    ldr r0, =promptB
    bl printf      

    @  get integer value for sideB
    @ ldr r0, =numPattern // tells program a number is coming
    @ ldr r1, =sideB      // load r1 with sideB
    @ bl scanf            // r1=sideB         

    @ output sideB
    ldr r0, =outputB    // load this string in r0
    ldr r1, =sideB      // load r1 with sideB address
    ldr r1, [r1]        // load value stored in r1's address
    bl printf          // print value of sideB
    
    
    @@---------- Add sideA + sideB ---------@@   

    // set r7 with sideA
    ldr r0, =sideA      // load r0 with sideA address
    ldr r0, [r0]        // load value stored in r0's address
    mov r7, r0          // r7=sideA
    
    // add sideB to r7
    ldr r1, =sideB      // load r1 with sideA address
    ldr r1, [r1]        // get value stored in the address thats load in r1
    add r7, r7, r1      // r7 += sideB

    //------------ Print results -----------------//
    @ @ output total sum
    ldr r0, =outputSum    // load this string in r0
    @ ldr r1, r7            // load r7's address
    @ ldr r1, [r1]        // load r7's value 
    @ bl printf          // print value of sum

    //mov r0, #0  @return 0; }
    
    pop {pc} // should return 2 if the sqrt is working
