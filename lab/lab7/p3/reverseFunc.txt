reversed:                    @ reversed(r0=userArr[], r1=size)

    push {r4-r8, lr}         @ protect safe registers from being overwritten in function

    @ Reverse array
    @ for(int i=0, j=size-1; i<size; i++, j--){
    @     revArr[j]=userArr[i]; }

    @ set variables before for the loop
    mov r4, #0               @ i=0
    mov r5, r1               @ j=size==6
    sub r5, r5, #1           @ j=6-1. My descending index for the revArr[]
    mov r6, r1               @ stop=size==6
    mov r7, r0               @ r7=userArr[]   
    @ldr r8, =definedArr     @ definedArr[]={100,90,80,70,66,50}
    ldr r8, =revArr          @ r8=revArr[]={0}

    @ Output prefined revArr[]    
    ldr r0, =outInside       @ "inside reverse()"
    bl printf

    @ {
    forI:                     @ for(int i=0, j=size-1; i<size; i++, j--)
        cmp r4, r6            @ (i-size)==set flags
        bge endForI           @ if(i>=size)(Z==0 or N==V), then exit for loop  

        @ Reset revArr[j] to equal userArr[i]
        @ mov r0, r7          @ r0=r7=userArr
        @ ldr r0, [r0]        @ load userArr[i]
        @ str r7, [r8]        @ str src, dest --> str userArr[i], revArr[j]

        @ldr r8, [r8]
        @ldr r7, [r7]
        @str r7, [r8]         @ str src, dest --> str userArr[i], revArr[j]


        ldr r0, =outUsrArrIndx      @ "userArr[i]" 
        mov r1, r4                  @ r4=i
        ldr r2, [r7]                @ r2=&r7=userArr[i]
        bl printf                   
        
        ldr r0, =outRevArrIndx      @ output revArr[j]
        mov r1, r5                  @ r5=j==5,4,3,2,1
        ldr r2, [r8]                @ r2=&r8=definedArr[?]
        bl printf

        @ incre/decre both array's addresses
        add r7, #4			@ usrArr[i+4bytes]    
        sub r8, #4			@ revArr[j-4bytes]

        @ incre/decre indicies        
        add r4, r4, #1      @ i++
        sub r5, r5, #1      @ j--
        bal forI            @ keep looping

    endForI:
        mov r0, r8
        pop {r4-r8, lr}     @ pop {pc}
    @ {
    
